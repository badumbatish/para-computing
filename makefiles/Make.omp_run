# -*- makefile -*-
################################################################
####
#### This makefile is part of `Parallel Programming in MPI and OpenMP'
#### by Victor Eijkhout, copyright 2013-2022
#### eijkhout@tacc.utexas.edu
####
#### Make include file for omp test runs
####
################################################################

info ::
	@echo "================ OMP running"
	@echo "make run_xxx in: ${RUNS}"

ifeq "${TACC_SYSTEM}" "frontera"
  OMPTHREADS = 1 2 4 8 12 26 38 56 
else
  OMPTHREADS = 1 2 4 8 12
endif
OMPSCHEDULE = static

info ::
	@echo "make omp_run [ NP=... ] PROGRAM=program"
	@echo "make omp_scaling [ NP=... ] [ NDIV=... ] [ PROGRAM=... ]"
	@echo "    OMPTHREADS= core range (default=${OMPTHREADS})"
	@echo "    OMPSCHEDULE= core range (default=${OMPSCHEDULE})"
	@echo "    NEST=true/false (default=${NEST})"
	@echo "    BIND=true/false/cores/... (OMP_PROC_BIND, default=${BIND})"
	@echo "    ACTIVE=... (default=${ACTIVE}) for OMP_MAX_ACTIVE_LEVELS"

.PHONY: omp_scaling
BIND = true
NEST = false
ACTIVE = 1
ECHO = 0
.PHONY: omp_run omp_scaling
omp_run :
	@command="./${PROGRAM}" \
	 && np=`make --no-print-directory num_cores NP=${NP}` \
	 && command="OMP_NUM_THREADS=$$np $$command" \
	 && command="OMP_PROC_BIND=${BIND} $$command" \
	 && if [ "${NEST}" = true ] ; then \
	         command="OMP_MAX_ACTIVE_LEVELS=${ACTIVE} $$command" ; fi \
	 && if [ ${ECHO} = 1 ] ; then echo "executing: $$command" ; fi \
	 && eval $$command
omp_scaling :
	@export np=$$( make --no-print-directory num_cores ) \
	 && export ompthreads="$$( make --no-print-directory omp_threads )" \
	 && if [ -z "${PROGRAM}" ] ; then \
	        echo "Set PROGRAM variable" && exit 1 \
	    ; fi \
	 && results=${PROGRAM}-scaling.out \
	 && ( \
	    for t in $$ompthreads ; do \
	        make --no-print-directory omp_run NP=$$t PROGRAM=${PROGRAM} NEST=${NEST} \
	         && echo \
	    ; done \
	    ) | tee $$results \
	 && cat $$results | awk '/threads/ { t = $$4 } /speedup=/ { print t " " $$6 }'

#
# Utility targets
#
.PHONY: num_cores
num_cores :
	@if [ ! -z ${NP} ] ; then \
	        echo ${NP} \
	    ; elif [ ! -z ${SLURM_TASKS_PER_NODE} ] ; then \
	        echo ${SLURM_TASKS_PER_NODE} \
	    ; else \
	        echo "Specify number of processors with NP=..." \
	         && exit 1 \
	    ; fi
.PHONY: omp_threads
omp_threads :
	@if [ ! -z "${OMPTHREADS}" ] ; then \
	    echo "${OMPTHREADS}" \
	    ; \
	else \
	    if [ ! -z "${NDIV}" ] ; then \
	        ndiv=${NDIV} \
	    ; else \
	        ndiv=3 \
	    ; fi \
	     && div=`seq 1 $$ndiv` \
	     && frac=`for d in $$div ; do echo "$$(( $$d * $$np / $$ndiv ))" ; done` \
	     && echo "1 $$frac" \
	    ; \
	fi

info ::
	@echo "make runs : compile and run everything and generate output file"
	@echo "    using RUNS=${RUNS}"

.PHONY: runs
runs :
	@for r in ${RUNS} ; do \
	    echo "---------------- Test run: $$r ----------------" \
	     && runname=$${r##run_} \
	     && make --no-print-directory $$r OPTLEVEL=${OPTLEVEL} \
	                NEST=${NEST} ACTIVE=${ACTIVE} OMPTHREADS="${OMPTHREADS}" \
	            2>&1 | tee $$runname.runout \
	     && git add  $$runname.runout \
	 ; done

total_clean ::
	@rm -f *.runout

